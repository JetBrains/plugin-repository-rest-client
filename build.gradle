plugins {
  alias(builds.plugins.kotlin.jvm)
  id "maven-publish"
  id "signing"
}

allprojects {
  apply plugin: 'java'

  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'kotlin'

  sourceCompatibility = '11'
  dependencies {
    implementation(libs.slf4j.old.api)
  }
}

task fatJar(type: Jar, group: 'build') {
  subprojects {
    dependsOn it.classes
  }
  manifest {
    attributes 'Main-Class': 'org.jetbrains.intellij.pluginRepository.Client'
  }
  subprojects { project ->
    from { project.configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
  }
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

group = 'org.jetbrains.intellij'
def buildNumber = System.getenv('BUILD_NUMBER') ?: "SNAPSHOT"
version = "2.0.$buildNumber"

apply plugin: 'maven-publish'

task sourceJar(type: Jar) {
  subprojects {
    from it.sourceSets.main.kotlin
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  subprojects {
    from javadoc.destinationDir
  }
}

artifacts {
  archives sourceJar, fatJar, javadocJar
}

publishing {
  publications {

    def configurePublication = { MavenPublication pub, String projectName, String pubName, String pubDesc ->
      def proj = project(":services:$projectName")
      pub.groupId proj.group
      pub.artifactId proj.name
      pub.version proj.version

      pub.pom {
        name.set(pubName)
        description.set(pubDesc)
        url.set("https://github.com/JetBrains/plugin-repository-rest-client")
        licenses {
          license {
            name.set("The Apache Software License, Version 2.0")
            url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
          }
        }
        developers {
          developer {
            id.set("AlexanderPrendota")
            name.set("Alexander Prendota")
            organization.set("JetBrains")
          }
          developer {
            id.set("zolotov")
            name.set("Alexander Zolotov")
            organization.set("JetBrains")
          }
          developer {
            id.set("serejke")
            name.set("Sergey Patrikeev")
            organization.set("JetBrains")
          }
          developer {
            id.set("chashnikov")
            name.set("Nikolay Chashnikov")
            organization.set("JetBrains")
          }
          developer {
            id.set("satamas")
            name.set("Semyon Atamas")
            organization.set("JetBrains")
          }
          developer {
            id.set("chrkv")
            name.set("Ivan Chirkov")
            organization.set("JetBrains")
          }
          developer {
            id.set("kesarevs")
            name.set("Kesarev Sergey")
            organization.set("JetBrains")
          }
          developer {
            id.set("yole")
            name.set("Dmitry Jemerov")
            organization.set("JetBrains")
          }
          developer {
            id.set("VladRassokhin")
            name.set("Vladislav Rassokhin")
            organization.set("JetBrains")
          }
          developer {
            id.set("hsz")
            name.set("Jakub Chrzanowski")
            organization.set("JetBrains")
          }
          developer {
            id.set("LChernigovskaya")
            name.set("Lidiya Chernigovskaya")
            organization.set("JetBrains")
          }
        }
        scm {
          connection.set("scm:git:git://github.com/JetBrains/plugin-repository-rest-client.git")
          developerConnection.set("scm:git:ssh://github.com/JetBrains/plugin-repository-rest-client.git")
          url.set("https://github.com/JetBrains/plugin-repository-rest-client")
        }
      }
    }

    mavenJava(MavenPublication) {
      from project(':services:plugin-repository-rest-client:rest').components.java
      artifact(sourceJar) {
        classifier "sources"
      }
      artifact(fatJar) {
        classifier "all"
      }
      artifact(javadocJar) {
        classifier "javadoc"
      }

      configurePublication(it, "plugin-repository-rest-client", "Plugin Repository Rest Client", "The client and command line interface for JetBrains Marketplace.")
    }
  }

  repositories {
    maven {
      url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2")

      credentials {
        username = findProperty("mavenCentralUsername").toString()
        password = findProperty("mavenCentralPassword").toString()
      }
    }
  }

}

signing {
  required { findProperty("mavenCentralUsername") != null }

  if( required ) {
    useInMemoryPgpKeys(findProperty("signingKey").toString(), findProperty("signingPassword").toString())
    sign(publishing.publications.mavenJava)
  }
}
